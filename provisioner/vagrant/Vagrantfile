# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# configuration options: https://www.vagrantup.com/docs/vagrantfile
require './environment'


ENV["LC_ALL"] = "en_US.UTF-8"

BOX_DISTRO = "generic/ubuntu1804"

MASTER_NODE_COUNT = 1
WORKER_NODE_COUNT = 2
DATA_NODE_COUNT = 1
$ip_counter = 1

$box_distro = (not defined? K8S_BOX_DISTRO) ? BOX_DISTRO : K8S_BOX_DISTRO
$master_node_count = (not defined? K8S_MASTER_NODE_COUNT) ? MASTER_NODE_COUNT : K8S_MASTER_NODE_COUNT
$worker_node_count = (not defined? K8S_WORKER_NODE_COUNT) ? WORKER_NODE_COUNT : K8S_WORKER_NODE_COUNT
$data_node_count = (not defined? K8S_DATA_NODE_COUNT) ? DATA_NODE_COUNT : K8S_DATA_NODE_COUNT

if not defined? K8S_DOMAIN
    STDERR.puts("undefined 'K8S_DOMAIN' environment (required format: 'dom.subdom.tld')")
    exit(false)
else
    $k8s_domain = K8S_DOMAIN
end

if not defined? K8S_SSH_PUBLIC_KEY_PATH
    STDERR.puts("undefined 'K8S_SSH_PUBLIC_KEY_PATH' environment")
    exit(false)
else
    $public_key_path = K8S_SSH_PUBLIC_KEY_PATH
end

if not defined? K8S_NODES_NET_PREFIX
    STDERR.puts("undefined 'K8S_NODES_NET_PREFIX' environment (required format: '10.2.1.')")
    exit(false)
else
    $ip_prefix = K8S_NODES_NET_PREFIX
end

if not defined? K8S_NETWORK_BRIDGE_NAME
    STDERR.puts("undefined 'K8S_NETWORK_BRIDGE_NAME' environment")
    exit(false)
else
    $network_bridge = K8S_NETWORK_BRIDGE_NAME
end

Vagrant.require_version ">= 2.0.0"

def create_node(config, prefix, i, ip)
    short_prefix = prefix[0]
    config.vm.define "#{prefix}-#{i}" do |node|
        node.vm.hostname = "#{short_prefix}#{i}.#{$k8s_domain}"
        node.vm.network :public_network,
            :dev => $network_bridge,
            :mode => "bridge",
            :type => "bridge",
            :ip => ip
        node.vm.post_up_message = "#{prefix} #{i} started"
        node.vm.provision "file", source: $public_key_path, destination: "~/.ssh/id_k8s_host.pub"
        node.vm.provision "shell", inline: "cat /home/vagrant/.ssh/id_k8s_host.pub >> /home/vagrant/.ssh/authorized_keys"
        # node.vm.provider :libvirt do |libvirt|
        #     libvirt.memory = 2048
        # end
    end
end

Vagrant.configure("2") do |config|
    config.vm.box = $box_distro
    config.vm.synced_folder ".", "/vagrant", disabled: true
    config.vm.provider :libvirt do |libvirt|
        libvirt.management_network_name = "vagrant-mgmt"
        libvirt.management_network_address = "10.1.1.0/28"
        libvirt.storage_pool_name = "k8s_images"  # must be defined if the pool differs from the default
        libvirt.memory = 4096
    end

    # master nodes
    (1..$master_node_count).each do |i|
        $ip_counter += 1
        ip = "#{$ip_prefix}#{$ip_counter}"
        create_node(config, "master", i, ip)
    end

    # worker nodes
    (1..$worker_node_count).each do |i|
        $ip_counter += 1
        ip = "#{$ip_prefix}#{$ip_counter}"
        create_node(config, "node", i, ip)
    end

    # data node simulating remote storage server
    (1..$data_node_count).each do |i|
        $ip_counter += 1
        ip = "#{$ip_prefix}#{$ip_counter}"
        create_node(config, "data", i, ip)
    end
end
